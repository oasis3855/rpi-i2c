#!/usr/bin/perl

# SSD1306 グラフィックLCD
# for Raspberry Pi
use warnings;
use strict;
use IO::File;
use Fcntl;
use Time::HiRes 'usleep';

# https://mirrors.edge.kernel.org/pub/linux/kernel/people/marcelo/linux-2.4/include/linux/i2c.h
use constant I2C_SLAVE       => 0x0703;
use constant I2C_SLAVE_FORCE => 0x0706;
use constant I2C_RDWR        => 0x0707;

use constant SSD1306_I2C_ADDRESS => 0x3c;

use constant SSD1306_DISPLAY_WIDTH => 128;    # 画面横ピクセル
use constant SSD1306_DISPLAY_HEIGHT => 32; # 画面縦ピクセル（ピクセル数を8で割るとページ数表記となる）

use constant SSD1306_FONTBITMAP_NORMAL    => 0;
use constant SSD1306_FONTBITMAP_INVERT    => 1;
use constant SSD1306_FONTBITMAP_UNDERLINE => 2;

# 8x8ピクセルのASCII文字ビットマップ
# フォントデータ出典・複写
# https://github.com/greiman/SSD1306Ascii/blob/master/src/fonts/font8x8.h
my @font_bitmap = (
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    # <space>
    0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00,    # !
    0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00,    # "
    0x00, 0x24, 0x7E, 0x24, 0x24, 0x7E, 0x24, 0x00,    # #
    0x00, 0x2E, 0x2A, 0x7F, 0x2A, 0x3A, 0x00, 0x00,    # $
    0x00, 0x46, 0x26, 0x10, 0x08, 0x64, 0x62, 0x00,    # %
    0x00, 0x20, 0x54, 0x4A, 0x54, 0x20, 0x50, 0x00,    # &
    0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00,    # '
    0x00, 0x00, 0x00, 0x3C, 0x42, 0x00, 0x00, 0x00,    # (
    0x00, 0x00, 0x00, 0x42, 0x3C, 0x00, 0x00, 0x00,    # )
    0x00, 0x10, 0x54, 0x38, 0x54, 0x10, 0x00, 0x00,    # *
    0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00,    # +
    0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00,    # ,
    0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00,    # -
    0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00,    # .
    0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00,    # /

    0x3C, 0x62, 0x52, 0x4A, 0x46, 0x3C, 0x00, 0x00,    # 0
    0x44, 0x42, 0x7E, 0x40, 0x40, 0x00, 0x00, 0x00,    # 1
    0x64, 0x52, 0x52, 0x52, 0x52, 0x4C, 0x00, 0x00,    # 2
    0x24, 0x42, 0x42, 0x4A, 0x4A, 0x34, 0x00, 0x00,    # 3
    0x30, 0x28, 0x24, 0x7E, 0x20, 0x20, 0x00, 0x00,    # 4
    0x2E, 0x4A, 0x4A, 0x4A, 0x4A, 0x32, 0x00, 0x00,    # 5
    0x3C, 0x4A, 0x4A, 0x4A, 0x4A, 0x30, 0x00, 0x00,    # 6
    0x02, 0x02, 0x62, 0x12, 0x0A, 0x06, 0x00, 0x00,    # 7
    0x34, 0x4A, 0x4A, 0x4A, 0x4A, 0x34, 0x00, 0x00,    # 8
    0x0C, 0x52, 0x52, 0x52, 0x52, 0x3C, 0x00, 0x00,    # 9
    0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00,    # :
    0x00, 0x00, 0x80, 0x64, 0x00, 0x00, 0x00, 0x00,    # ;
    0x00, 0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00,    # <
    0x00, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00,    # =
    0x00, 0x00, 0x44, 0x28, 0x10, 0x00, 0x00, 0x00,    # >
    0x00, 0x04, 0x02, 0x02, 0x52, 0x0A, 0x04, 0x00,    # ?

    0x00, 0x3C, 0x42, 0x5A, 0x56, 0x5A, 0x1C, 0x00,    # @
    0x7C, 0x12, 0x12, 0x12, 0x12, 0x7C, 0x00, 0x00,    # A
    0x7E, 0x4A, 0x4A, 0x4A, 0x4A, 0x34, 0x00, 0x00,    # B
    0x3C, 0x42, 0x42, 0x42, 0x42, 0x24, 0x00, 0x00,    # C
    0x7E, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00,    # D
    0x7E, 0x4A, 0x4A, 0x4A, 0x4A, 0x42, 0x00, 0x00,    # E
    0x7E, 0x0A, 0x0A, 0x0A, 0x0A, 0x02, 0x00, 0x00,    # F
    0x3C, 0x42, 0x42, 0x52, 0x52, 0x34, 0x00, 0x00,    # G
    0x7E, 0x08, 0x08, 0x08, 0x08, 0x7E, 0x00, 0x00,    # H
    0x00, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x00, 0x00,    # I
    0x30, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x00, 0x00,    # J
    0x7E, 0x08, 0x08, 0x14, 0x22, 0x40, 0x00, 0x00,    # K
    0x7E, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00,    # L
    0x7E, 0x04, 0x08, 0x08, 0x04, 0x7E, 0x00, 0x00,    # M
    0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E, 0x00, 0x00,    # N
    0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00,    # O

    0x7E, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00,    # P
    0x3C, 0x42, 0x52, 0x62, 0x42, 0x3C, 0x00, 0x00,    # Q
    0x7E, 0x12, 0x12, 0x12, 0x32, 0x4C, 0x00, 0x00,    # R
    0x24, 0x4A, 0x4A, 0x4A, 0x4A, 0x30, 0x00, 0x00,    # S
    0x02, 0x02, 0x02, 0x7E, 0x02, 0x02, 0x02, 0x00,    # T
    0x3E, 0x40, 0x40, 0x40, 0x40, 0x3E, 0x00, 0x00,    # U
    0x1E, 0x20, 0x40, 0x40, 0x20, 0x1E, 0x00, 0x00,    # V
    0x3E, 0x40, 0x20, 0x20, 0x40, 0x3E, 0x00, 0x00,    # W
    0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00, 0x00,    # X
    0x02, 0x04, 0x08, 0x70, 0x08, 0x04, 0x02, 0x00,    # Y
    0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x00, 0x00,    # Z
    0x00, 0x00, 0x7E, 0x42, 0x42, 0x00, 0x00, 0x00,    # [
    0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00,    # <backslash>
    0x00, 0x00, 0x42, 0x42, 0x7E, 0x00, 0x00, 0x00,    # ]
    0x00, 0x08, 0x04, 0x7E, 0x04, 0x08, 0x00, 0x00,    # ^
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,    # _

    0x3C, 0x42, 0x99, 0xA5, 0xA5, 0x81, 0x42, 0x3C,    # `
    0x00, 0x20, 0x54, 0x54, 0x54, 0x78, 0x00, 0x00,    # a
    0x00, 0x7E, 0x48, 0x48, 0x48, 0x30, 0x00, 0x00,    # b
    0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x00, 0x00,    # c
    0x00, 0x30, 0x48, 0x48, 0x48, 0x7E, 0x00, 0x00,    # d
    0x00, 0x38, 0x54, 0x54, 0x54, 0x48, 0x00, 0x00,    # e
    0x00, 0x00, 0x00, 0x7C, 0x0A, 0x02, 0x00, 0x00,    # f
    0x00, 0x18, 0xA4, 0xA4, 0xA4, 0xA4, 0x7C, 0x00,    # g
    0x00, 0x7E, 0x08, 0x08, 0x08, 0x70, 0x00, 0x00,    # h
    0x00, 0x00, 0x00, 0x48, 0x7A, 0x40, 0x00, 0x00,    # i
    0x00, 0x00, 0x40, 0x80, 0x80, 0x7A, 0x00, 0x00,    # j
    0x00, 0x7E, 0x18, 0x24, 0x40, 0x00, 0x00, 0x00,    # k
    0x00, 0x00, 0x00, 0x3E, 0x40, 0x40, 0x00, 0x00,    # l
    0x00, 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00, 0x00,    # m
    0x00, 0x7C, 0x04, 0x04, 0x04, 0x78, 0x00, 0x00,    # n
    0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00,    # o

    0x00, 0xFC, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00,    # p
    0x00, 0x18, 0x24, 0x24, 0x24, 0xFC, 0x80, 0x00,    # q
    0x00, 0x00, 0x78, 0x04, 0x04, 0x04, 0x00, 0x00,    # r
    0x00, 0x48, 0x54, 0x54, 0x54, 0x20, 0x00, 0x00,    # s
    0x00, 0x00, 0x04, 0x3E, 0x44, 0x40, 0x00, 0x00,    # t
    0x00, 0x3C, 0x40, 0x40, 0x40, 0x3C, 0x00, 0x00,    # u
    0x00, 0x0C, 0x30, 0x40, 0x30, 0x0C, 0x00, 0x00,    # v
    0x00, 0x3C, 0x40, 0x38, 0x40, 0x3C, 0x00, 0x00,    # w
    0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00,    # x
    0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C, 0x00, 0x00,    # y
    0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00,    # z
    0x00, 0x08, 0x08, 0x76, 0x42, 0x42, 0x00, 0x00,    # {
    0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,    # |
    0x00, 0x42, 0x42, 0x76, 0x08, 0x08, 0x00, 0x00,    # }
    0x00, 0x00, 0x04, 0x02, 0x04, 0x02, 0x00, 0x00     # ~
);

{
    print "SSD1306 Test\n";
    eval {
        my $fh = IO::File->new( "/dev/i2c-1", O_RDWR );
        $fh->ioctl( I2C_SLAVE_FORCE, SSD1306_I2C_ADDRESS );
        $fh->binmode();

        # LCD初期化、表示開始
        ssd1306_init( $fh, SSD1306_DISPLAY_WIDTH, SSD1306_DISPLAY_HEIGHT );
        ssd1306_power_on($fh);
        print "lcd power on\n";

        usleep( 200 * 1000 );

        # 画面クリア
        ssd1306_clear_display( $fh, SSD1306_DISPLAY_WIDTH,
                               SSD1306_DISPLAY_HEIGHT,
                               SSD1306_FONTBITMAP_NORMAL );

        sleep(1);

        ssd1306_set_cursor( $fh, 0, 0 );
        ssd1306_print( $fh, "SSD1306 demo", SSD1306_FONTBITMAP_INVERT );

        # 時計を表示する（10秒間）
        for ( my $i = 0 ; $i < 10 ; $i++ ) {
            my ( $sec, $min, $hour, $mday, $month, $year, $wday, $stime ) =
              localtime( time() );
            ssd1306_set_cursor( $fh, 1, 1 );
            ssd1306_print(
                           $fh,
                           sprintf( "%04d/%02d/%02d",
                                    $year + 1900,
                                    $month + 1, $mday ),
                           SSD1306_FONTBITMAP_NORMAL
            );
            ssd1306_set_cursor( $fh, 1, 3 );
            ssd1306_print( $fh, sprintf( "%02d:%02d:%02d", $hour, $min, $sec ),
                           SSD1306_FONTBITMAP_NORMAL );
            sleep(1);
        }

        # 画面クリア（全画素塗りつぶし）
        ssd1306_clear_display( $fh, SSD1306_DISPLAY_WIDTH,
                               SSD1306_DISPLAY_HEIGHT,
                               SSD1306_FONTBITMAP_INVERT );

        sleep(1);

        # LCD表示終了
        ssd1306_power_off($fh);
        print "lcd power off\n";

        close($fh);
    };
    if ($@) {
        print "error : $@";
        return;
    }

}

# デバイス初期設定
# SSD1306マニュアル 最終ページ 「3. Software Configuration」の標準例の値をそのままコピー
sub ssd1306_init {
    my ( $fh, $width, $height ) = @_;

    # デバイス初期設定
    my @array_bytes = (
                        0x00,    # コントロールバイト Co=0, D/C#=0
                        0xa8,    # Set MUX ratio
                        0x3f,
                        0xd3,    # Set vertical shift
                        0x00,    #   RESET(default) 0x00
                        0x40,    # Set Display Start Line, 0x40 + line
                        0xa0,    # Set Segment Re-map, 0xa0=column address 0
                        0xc0,    # Set COM Output Scan Direction
                        0xda,    # Set COM Pins
                        0x02,    #   RESET(default) 0x02
                        0x81,    # Set Contrast Control
                        0x7f,    #   default contrast = 0x7f
                        0xa4,    # Entire display ON
                        0xa6,    # Set Normal display
                        0xd5,    # Set Display Clock
                        0x80     #   RESET(default) 0x80
    );
    i2c_write_bytes( $fh, \@array_bytes );

    # 画面解像度などの初期設定
    # 128x32のLCDの場合、カラムは0〜127、ページは0〜3となる
    @array_bytes = (
        0x00,    # コントロールバイト Co=0, D/C#=0
        0x20,    # アドレッシングモード指定
        0x00,    #   Horizontalモード
        0x21,    # カラム指定
        0x00,    #   開始位置(0)
        ( $width - 1 ), #   終了位置(127) .... 1カラムは1ピクセルの幅
        0x22,           # ページ指定
        0x00,           #   開始ページ(0)
        ( $height / 8 - 1 ), #   終了ページ(3) .... 1ページは8ピクセルの高さ
        0x2e,                # スクロール解除
    );
    i2c_write_bytes( $fh, \@array_bytes );

}

# LCD表示開始
sub ssd1306_power_on {
    my $fh = shift;
    my @array_bytes = (
                 0x00,                # コントロールバイト Co=0, D/C#=0
                 0x8d,                # チャージポンプ設定
                 0x14,                #   チャージポンプOn
                 0xaf                 # 画面表示On
    );
    i2c_write_bytes( $fh, \@array_bytes );
}

# LCD表示停止
sub ssd1306_power_off {
    my $fh = shift;
    my @array_bytes = (
                 0x00,                # コントロールバイト Co=0, D/C#=0
                 0x8d,                # チャージポンプ設定
                 0x10,                #   チャージポンプOff
                 0xae                 # 画面表示Off
    );
    i2c_write_bytes( $fh, \@array_bytes );
}

# 画面クリア
sub ssd1306_clear_display {
    my ( $fh, $width, $height, $flag_invert ) = @_;

    ssd1306_set_cursor( $fh, 0, 0 );

    # 画面クリア（全画面分 ASCII空白文字を出力する）
    for ( my $j = 0 ; $j < $height / 8 ; $j++ ) {
        my @array_bytes = (0x40);    # コントロールバイト Co=0, D/C#=1
        for ( my $i = 0 ; $i < $width / 8 ; $i++ ) {

            # 1行ぶんの空白文字のビットマップを配列に格納
            push( @array_bytes, get_font_bitmap( " ", $flag_invert ) );
        }
        i2c_write_bytes( $fh, \@array_bytes );
    }
}

# LCDに文字列を表示する
sub ssd1306_print {
    my ( $fh, $str, $flag_invert ) = @_;
    my @array_bytes = (0x40);
    for ( my $i = 0 ; $i < length($str) ; $i++ ) {
        push( @array_bytes,
              get_font_bitmap( substr( $str, $i, 1 ), $flag_invert ) );
    }
    i2c_write_bytes( $fh, \@array_bytes );

}

# カーソル位置設定
# $column : 8ピクセルごとの横位置
# $height_page : 8ピクセルごとの縦のページ位置
sub ssd1306_set_cursor {
    my ( $fh, $column, $height_page ) = @_;

    my @array_bytes = (
        0x00,    # コントロールバイト Co=0, D/C#=0
        ( ( $column * 8 ) & 0x0f ),         # カラム下位4ビット
        ( ( $column * 8 ) >> 4 ) | 0x10,    # カラム上位4ビット
        $height_page | 0xb0,                # ページ指定
    );
    i2c_write_bytes( $fh, \@array_bytes );

}

# 8x8のフォントビットマップを配列に入れて返す
sub get_font_bitmap {
    my ( $char, $flag_invert ) = @_;
    my @array     = ();
    my $char_code = ( ord $char ) - 0x20;
    for ( my $i = 8 * $char_code ; $i < 8 * $char_code + 8 ; $i++ ) {
        push( @array, $font_bitmap[$i] );
    }
    if ( $flag_invert == SSD1306_FONTBITMAP_INVERT ) {
        for ( my $i = 0 ; $i <= $#array ; $i++ ) {
            $array[$i] ^= 0xff;
        }
    }
    if ( $flag_invert == SSD1306_FONTBITMAP_UNDERLINE ) {
        for ( my $i = 0 ; $i <= $#array ; $i++ ) {
            $array[$i] ^= 0x80;
        }
    }
    return @array;

}

sub i2c_write_bytes {
    my ( $i2c, $ref_array ) = @_;

    # アドレス 2Bytes をバイナリ形式の変数に格納
    my $buffer = pack( "C*", @{$ref_array} );

    # アドレス 2Bytes 送信
    $i2c->syswrite($buffer);

    return;
}
